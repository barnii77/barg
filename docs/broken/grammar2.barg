# TODO this grammar doesn't actually parse operations correctly. The expression a / b * c doesn't match. More on this below.
# This grammar uses syntax sugar where you really shouldn't use it, since the syntax sugar auto-generates bad field names and no enum tags.
# In an actual language parser, you should replace some of the (a | b) patterns with explicit enums and some of the (a b) sequences with structs.
# This is what the "language" parsed by this grammar looks like:
# a := 4
# x := 2 * 3 + 4
# y := (z := x * 4 + 5) / x * a

Int := struct {
  value: $builtin.int("\d+")
};

Var := struct {
  name: "[a-zA-Z_][a-zA-Z_0-9]*"
};

Term := Int | Var | "\(" AssignableExpr "\)";

PointOpTerm := Term;
LineOpTerm := Term | PointOp;

AddOp := struct {
  a: LineOpTerm,
  " *",
  op: "\+",
  " *",
  b: LineOp | LineOpTerm
};

SubOp := struct {
  a: LineOpTerm,
  " *",
  op: "-",
  " *",
  b: LineOpTerm
};

# TODO the ops below (MulOp, DivOp, ModOp) do not support having multiple of them in a row at the moment (ie writing a / b * c or similar does not work)

MulOp := struct {
  a: PointOpTerm,
  " *",
  op: "\*",
  " *",
  b: PointOp | PointOpTerm
};

DivOp := struct {
  a: PointOpTerm,
  " *",
  op: "/",
  " *",
  b: PointOpTerm
};

ModOp := struct {
  a: PointOpTerm,
  " *",
  op: "%",
  " *",
  b: PointOpTerm
};

PointOp := MulOp | DivOp | ModOp;

LineOp := AddOp | SubOp;

Expr := PointOp | LineOp | Term;

AssignableExpr := (Var " *:= *")? Expr;

Statement := AssignableExpr " *\n *";
Toplevel := Statement*;
